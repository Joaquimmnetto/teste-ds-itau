model_select = import('sklearn.model_selection')
loo = model_select$LeaveOneOut()
split = loo$split(q6_reg)
scores = 1:nrow(q6_reg)
#for(i in 1:nrow(q6_reg)){
splits = iter_next(split)
treino = unlist(splits[1])
val = unlist(splits[2])
clf = lr$Ridge(alpha = as.numeric(1.7))
x = q6_Y[val]
clf = clf$fit(q6_X[treino], q6_Y[treino])
pred_y = clf$predict(list(x))
lr = import('sklearn.linear_model')
model_select = import('sklearn.model_selection')
loo = model_select$LeaveOneOut()
split = loo$split(q6_reg)
scores = 1:nrow(q6_reg)
#for(i in 1:nrow(q6_reg)){
splits = iter_next(split)
treino = unlist(splits[1])
val = unlist(splits[2])
clf = lr$Ridge(alpha = as.numeric(1.7))
x = q6_Y[val]
clf = clf$fit(q6_X[treino], q6_Y[treino])
pred_y = clf$predict(list(42L))
lr = import('sklearn.linear_model')
model_select = import('sklearn.model_selection')
loo = model_select$LeaveOneOut()
split = loo$split(q6_reg)
scores = 1:nrow(q6_reg)
#for(i in 1:nrow(q6_reg)){
splits = iter_next(split)
treino = unlist(splits[1])
val = unlist(splits[2])
clf = lr$Ridge(alpha = as.numeric(1.7))
x = q6_Y[val]
clf = clf$fit(q6_X[treino], q6_Y[treino])
pred_y = clf$predict(list(x))
lr = import('sklearn.linear_model')
model_select = import('sklearn.model_selection')
loo = model_select$LeaveOneOut()
split = loo$split(q6_reg)
scores = 1:nrow(q6_reg)
#for(i in 1:nrow(q6_reg)){
splits = iter_next(split)
treino = unlist(splits[1])
val = unlist(splits[2])
clf = lr$Ridge(alpha = as.numeric(1.7))
clf = clf$fit(q6_X[treino], q6_Y[treino])
pred_y = clf$predict(q6_X[val])
lr = import('sklearn.linear_model')
model_select = import('sklearn.model_selection')
loo = model_select$LeaveOneOut()
split = loo$split(q6_reg)
scores = 1:nrow(q6_reg)
#for(i in 1:nrow(q6_reg)){
splits = iter_next(split)
treino = unlist(splits[1])
val = unlist(splits[2])
clf = lr$Ridge(alpha = as.numeric(1.7))
clf = clf$fit(q6_X[treino], q6_Y[treino])
pred_y = clf$predict(list(q6_X[val]))
list(q6_X[val])
q6_X[val]
val
knn = import('sklearn.neighbors')
model_select = import('sklearn.model_selection')
kfold = model_select$KFold(n_splits=as.integer(10), random_state=as.integer(42), shuffle=FALSE)
split = kfold$split(q4_clf)
q4_clf = fread('datasets/classificacao_Q4.csv')
q4_clf$target = as.factor(q4_clf$target)
q4_Y = q4_clf$target
q4_X = q4_clf
q4_X$target = NULL
knn = import('sklearn.neighbors')
model_select = import('sklearn.model_selection')
kfold = model_select$KFold(n_splits=as.integer(10), random_state=as.integer(42), shuffle=FALSE)
split = kfold$split(q4_clf)
accuracies = 1:10
for(i in 1:10){
splits = iter_next(split)
treino = unlist(splits[1])+1
val = unlist(splits[2])+1
clf = knn$KNeighborsClassifier(n_neighbors = as.integer(15), p = as.integer(2))
clf = clf$fit(q4_X[treino], q4_Y[treino])
accuracies[i] = clf$score(q4_X[val], q4_Y[val])
}
print(accuracies)
mean(accuracies)
sd(accuracies)
lr = import('sklearn.linear_model')
model_select = import('sklearn.model_selection')
loo = model_select$LeaveOneOut()
split = loo$split(q6_reg)
scores = 1:nrow(q6_reg)
for(i in 1:nrow(q6_reg)){
splits = iter_next(split)
treino = unlist(splits[1])
val = unlist(splits[2])
clf = lr$Ridge(alpha = as.numeric(1.7))
clf = clf$fit(q6_X[treino], q6_Y[treino])
pred_y = clf$predict(list(q6_X[val]))
scores[i] = skmetrics$mean_squared_error(q6_Y[val], pred_Y)
}
lr = import('sklearn.linear_model')
model_select = import('sklearn.model_selection')
loo = model_select$LeaveOneOut()
split = loo$split(q6_reg)
scores = 1:nrow(q6_reg)
for(i in 1:nrow(q6_reg)){
splits = iter_next(split)
treino = unlist(splits[1])+1
val = unlist(splits[2])+1
clf = lr$Ridge(alpha = as.numeric(1.7))
clf = clf$fit(q6_X[treino], q6_Y[treino])
pred_y = clf$predict(list(q6_X[val]))
scores[i] = skmetrics$mean_squared_error(q6_Y[val], pred_Y)
}
lr = import('sklearn.linear_model')
model_select = import('sklearn.model_selection')
loo = model_select$LeaveOneOut()
split = loo$split(q6_reg)
scores = 1:nrow(q6_reg)
#for(i in 1:nrow(q6_reg)){
splits = iter_next(split)
treino = unlist(splits[1])+1
val = unlist(splits[2])+1
clf = lr$Ridge(alpha = as.numeric(1.7))
clf = clf$fit(q6_X[treino], q6_Y[treino])
pred_y = clf$predict(list(q6_X[val]))
q6_X[val]
lr = import('sklearn.linear_model')
model_select = import('sklearn.model_selection')
loo = model_select$LeaveOneOut()
split = loo$split(q6_reg)
scores = 1:nrow(q6_reg)
#for(i in 1:nrow(q6_reg)){
splits = iter_next(split)
treino = unlist(splits[1])+1
val = unlist(splits[2])+1
clf = lr$Ridge(alpha = as.numeric(1.7))
clf = clf$fit(q6_X[treino], q6_Y[treino])
pred_y = clf$predict(q6_X[val])
scores[i] = skmetrics$mean_squared_error(q6_Y[val], pred_Y)
lr = import('sklearn.linear_model')
model_select = import('sklearn.model_selection')
loo = model_select$LeaveOneOut()
split = loo$split(q6_reg)
scores = 1:nrow(q6_reg)
#for(i in 1:nrow(q6_reg)){
splits = iter_next(split)
treino = unlist(splits[1])+1
val = unlist(splits[2])+1
clf = lr$Ridge(alpha = as.numeric(1.7))
clf = clf$fit(q6_X[treino], q6_Y[treino])
pred_Y = clf$predict(q6_X[val])
scores[i] = skmetrics$mean_squared_error(q6_Y[val], pred_Y)
lr = import('sklearn.linear_model')
model_select = import('sklearn.model_selection')
loo = model_select$LeaveOneOut()
split = loo$split(q6_reg)
scores = 1:nrow(q6_reg)
#for(i in 1:nrow(q6_reg)){
splits = iter_next(split)
treino = unlist(splits[1])+1
val = unlist(splits[2])+1
clf = lr$Ridge(alpha = as.numeric(1.7))
clf = clf$fit(q6_X[treino], q6_Y[treino])
pred_Y = clf$predict(q6_X[val])
scores[i] = skmetrics$mean_squared_error(q6_Y[val], list(pred_Y))
list(pred_Y)
lr = import('sklearn.linear_model')
model_select = import('sklearn.model_selection')
loo = model_select$LeaveOneOut()
split = loo$split(q6_reg)
scores = 1:nrow(q6_reg)
#for(i in 1:nrow(q6_reg)){
splits = iter_next(split)
treino = unlist(splits[1])+1
val = unlist(splits[2])+1
clf = lr$Ridge(alpha = as.numeric(1.7))
clf = clf$fit(q6_X[treino], q6_Y[treino])
pred_Y = clf$predict(q6_X[val])
scores[1] = skmetrics$mean_squared_error(q6_Y[val], list(pred_Y))
q6_Y[val]
list(pred_Y),
list(pred_Y)
lr = import('sklearn.linear_model')
model_select = import('sklearn.model_selection')
loo = model_select$LeaveOneOut()
split = loo$split(q6_reg)
scores = 1:nrow(q6_reg)
#for(i in 1:nrow(q6_reg)){
splits = iter_next(split)
treino = unlist(splits[1])+1
val = unlist(splits[2])+1
clf = lr$Ridge(alpha = as.numeric(1.7))
clf = clf$fit(q6_X[treino], q6_Y[treino])
pred_Y = clf$predict(q6_X[val])
scores[1] = skmetrics$mean_squared_error(list(q6_Y[val]), list(pred_Y))
#}
summary(scores)
require(data.table)
require(reticulate)
random = import('random')
random$seed(as.numeric(42))
set.seed(42)
skmetrics = import("sklearn.metrics")
q6_reg = fread('datasets/regressao_q6.csv')
q6_Y = q6_reg$target
q6_X = q6_reg
q6_X$target = NULL
lr = import('sklearn.linear_model')
model_select = import('sklearn.model_selection')
loo = model_select$LeaveOneOut()
split = loo$split(q6_reg)
scores = 1:nrow(q6_reg)
for(i in 1:nrow(q6_reg)){
splits = iter_next(split)
treino = unlist(splits[1])+1
val = unlist(splits[2])+1
clf = lr$Ridge(alpha = as.numeric(1.7))
clf = clf$fit(q6_X[treino], q6_Y[treino])
pred_Y = clf$predict(q6_X[val])
scores[i] = skmetrics$mean_squared_error(list(q6_Y[val]), list(pred_Y))
}
summary(scores)
scores
pred_Y
q6_Y[val]
lr = import('sklearn.linear_model')
model_select = import('sklearn.model_selection')
loo = model_select$LeaveOneOut()
split = loo$split(q6_reg)
scores_treino = 1:nrow(q6_reg)
scores_val = 1:nrow(q6_reg)
for(i in 1:nrow(q6_reg)){
splits = iter_next(split)
treino = unlist(splits[1])+1
val = unlist(splits[2])+1
clf = lr$Ridge(alpha = as.numeric(1.7))
clf = clf$fit(q6_X[treino], q6_Y[treino])
tr_pred_Y = clf$predict(q6_X[treino])
scores_treino[i] = skmetrics$mean_squared_error(q6_Y[treino], tr_pred_Y)
pred_Y = clf$predict(q6_X[val])
scores_val[i] = skmetrics$mean_squared_error(list(q6_Y[val]), list(pred_Y))
}
summary(scores_treino)
summary(scores_val)
summary(sqrt(scores_treino))
summary(sqrt(scores_val))
summary(sqrt(scores_treino))
summary(sqrt(scores_val))
summary(sqrt(scores_treino))
summary(sqrt(scores_val))
sd(sqrt(scores_treino))
sd(sqrt(scores_val))
sd(sqrt(scores_val))
require(data.table)
require(reticulate)
random = import('random')
random$seed(as.numeric(42))
set.seed(42)
skmetrics = import("sklearn.metrics")
q7_reg = fread('datasets/regressao_q7.csv')
q7_Y = q7_reg$target
q7_X = q7_reg
q7_X$target = NULL
knn = import('sklearn.tree')
model_select = import('sklearn.model_selection')
kfold = model_select$KFold(n_splits=as.integer(10), random_state=as.integer(42), shuffle=FALSE)
split = kfold$split(q7_reg)
scores = 1:10
for(i in 1:10) {
splits = iter_next(split)
treino = unlist(splits[1])+1
val = unlist(splits[2])+1
clf = knn$DecisionTreeRegressor(criterion = 'mse')
clf = clf$fit(q7_X[treino], q7_Y[treino])
pred_Y = clf$predict(q7_X[val])
scores[i] = skmetrics$mean_absolute_error(q7_Y[val], pred_Y)
}
summary(scores)
sd(scores)
knn = import('sklearn.tree')
model_select = import('sklearn.model_selection')
kfold = model_select$KFold(n_splits=as.integer(10), random_state=as.integer(42), shuffle=FALSE)
split = kfold$split(q7_reg)
scores = 1:10
for(i in 1:10) {
splits = iter_next(split)
treino = unlist(splits[1])+1
val = unlist(splits[2])+1
clf = knn$DecisionTreeRegressor(criterion = 'mse')
clf = clf$fit(q7_X[treino], q7_Y[treino])
pred_Y = clf$predict(q7_X[val])
scores[i] = skmetrics$mean_absolute_error(q7_Y[val], pred_Y)
}
scores
summary(scores)
sd(scores)
knn = import('sklearn.tree')
model_select = import('sklearn.model_selection')
kfold = model_select$KFold(n_splits=as.integer(10), random_state=as.integer(42), shuffle=FALSE)
split = kfold$split(q7_reg)
scores = 1:10
for(i in 1:10) {
splits = iter_next(split)
treino = unlist(splits[1])+1
val = unlist(splits[2])+1
clf = knn$DecisionTreeRegressor(criterion = 'mse', random_state = 42)
clf = clf$fit(q7_X[treino], q7_Y[treino])
pred_Y = clf$predict(q7_X[val])
scores[i] = skmetrics$mean_absolute_error(q7_Y[val], pred_Y)
}
require(data.table)
require(reticulate)
random = import('random')
random$seed(as.numeric(42))
set.seed(42)
skmetrics = import("sklearn.metrics")
q1_cntr = fread('datasets/agrup_centroides_Q1.csv',
col.names = c("id","x1","x2","x3","x4"),
colClasses = c("factor","numeric","numeric","numeric","numeric")
)
q1_points = fread('datasets/agrupamento_Q1.csv',
col.names = c("x1","x2","x3","x4"),
colClasses = c("numeric","numeric","numeric","numeric")
)
q1_cntr$id = NULL
silhouettes = 1:12
silhouettes[1] = -Inf
centers = list()
for(n in 2:12){
clt = import('sklearn.cluster')
y = clt$KMeans(n_clusters = as.integer(n), max_iter = as.integer(10), init = q1_cntr[1:n], random_state = as.integer(42))
clusters = y$fit_predict(q1_points)
if(n==5){ print(y$cluster_centers_)}
#clusters = as.factor(apply(distances, 1, which.min))
scores = skmetrics$silhouette_score(X=q1_points, labels=clusters)
silhouettes[n] = scores
}
print(silhouettes)
q3_clf = fread('datasets/classificacao_Q3.csv',
col.names = c("genero","idade","escolaridade","profissao","target"),
colClasses = c("factor","factor","factor","factor","factor")
)
q3_clf$genero = as.numeric(q3_clf$genero)
q3_clf$idade = as.numeric(q3_clf$idade)
q3_clf$escolaridade = as.numeric(q3_clf$escolaridade)
q3_clf$profissao = as.numeric(q3_clf$profissao)
q3_X = q3_clf
q3_Y = q3_clf$target
treino = 1:500
val = 501:nrow(q3_clf)
q3_X$target = NULL
nb = import('sklearn.naive_bayes')
clf = nb$GaussianNB()
clf = clf$fit(q3_X[treino],q3_Y[treino])
clf$score(q3_X[treino],q3_Y[treino])
clf$score(q3_X[val],q3_Y[val])
q4_clf = fread('datasets/classificacao_Q4.csv')
q4_clf$target = as.factor(q4_clf$target)
q4_Y = q4_clf$target
q4_X = q4_clf
q4_X$target = NULL
knn = import('sklearn.neighbors')
model_select = import('sklearn.model_selection')
kfold = model_select$KFold(n_splits=as.integer(10), random_state=as.integer(42), shuffle=FALSE)
split = kfold$split(q4_clf)
accuracies = 1:10
for(i in 1:10){
splits = iter_next(split)
treino = unlist(splits[1])+1
val = unlist(splits[2])+1
clf = knn$KNeighborsClassifier(n_neighbors = as.integer(15), p = as.integer(2))
clf = clf$fit(q4_X[treino], q4_Y[treino])
accuracies[i] = clf$score(q4_X[val], q4_Y[val])
}
require(data.table)
require(reticulate)
random = import('random')
random$seed(as.numeric(42))
set.seed(42)
skmetrics = import("sklearn.metrics")
q7_reg = fread('datasets/regressao_q7.csv')
q7_Y = q7_reg$target
q7_X = q7_reg
q7_X$target = NULL
knn = import('sklearn.tree')
model_select = import('sklearn.model_selection')
kfold = model_select$KFold(n_splits=as.integer(10), random_state=as.integer(42), shuffle=FALSE)
split = kfold$split(q7_reg)
scores = 1:10
for(i in 1:10) {
splits = iter_next(split)
treino = unlist(splits[1])+1
val = unlist(splits[2])+1
clf = knn$DecisionTreeRegressor(criterion = 'mse', random_state = as.integer(42))
clf = clf$fit(q7_X[treino], q7_Y[treino])
pred_Y = clf$predict(q7_X[val])
scores[i] = skmetrics$mean_absolute_error(q7_Y[val], pred_Y)
}
scores
summary(scores)
sd(scores)
knn = import('sklearn.tree')
model_select = import('sklearn.model_selection')
kfold = model_select$KFold(n_splits=as.integer(10), random_state=as.integer(42), shuffle=FALSE)
split = kfold$split(q7_reg)
scores = 1:10
for(i in 1:10) {
splits = iter_next(split)
treino = unlist(splits[1])+1
val = unlist(splits[2])+1
clf = knn$DecisionTreeRegressor(criterion = 'mse', random_state = as.integer(42))
clf = clf$fit(q7_X[treino], q7_Y[treino])
pred_Y = clf$predict(q7_X[val])
scores[i] = skmetrics$mean_absolute_error(q7_Y[val], pred_Y)
}
scores
summary(scores)
sd(scores)
scores
mean(scores_treino)
q7_reg = fread('datasets/regressao_q7.csv')
require(data.table)
require(reticulate)
random = import('random')
random$seed(as.numeric(42))
set.seed(42)
skmetrics = import("sklearn.metrics")
q7_reg = fread('datasets/regressao_q7.csv')
q7_Y = q7_reg$target
q7_X = q7_reg
q7_X$target = NULL
knn = import('sklearn.tree')
model_select = import('sklearn.model_selection')
kfold = model_select$KFold(n_splits=as.integer(10), random_state=as.integer(42), shuffle=FALSE)
split = kfold$split(q7_reg)
scores = 1:10
for(i in 1:10) {
splits = iter_next(split)
treino = unlist(splits[1])+1
val = unlist(splits[2])+1
clf = knn$DecisionTreeRegressor(criterion = 'mse', random_state = as.integer(42))
clf = clf$fit(q7_X[treino], q7_Y[treino])
tr_pred_Y = clf$predict(q7_X[treino])
scores_treino[i] = skmetrics$mean_absolute_error(q7_Y[treino], tr_pred_Y)
pred_Y = clf$predict(q7_X[val])
scores_val[i] = skmetrics$mean_absolute_error(q7_Y[val], pred_Y)
}
knn = import('sklearn.tree')
model_select = import('sklearn.model_selection')
kfold = model_select$KFold(n_splits=as.integer(10), random_state=as.integer(42), shuffle=FALSE)
split = kfold$split(q7_reg)
scores_treino = 1:10
scores_val = 1:10
for(i in 1:10) {
splits = iter_next(split)
treino = unlist(splits[1])+1
val = unlist(splits[2])+1
clf = knn$DecisionTreeRegressor(criterion = 'mse', random_state = as.integer(42))
clf = clf$fit(q7_X[treino], q7_Y[treino])
tr_pred_Y = clf$predict(q7_X[treino])
scores_treino[i] = skmetrics$mean_absolute_error(q7_Y[treino], tr_pred_Y)
pred_Y = clf$predict(q7_X[val])
scores_val[i] = skmetrics$mean_absolute_error(q7_Y[val], pred_Y)
}
scores
mean(scores_treino)
sd(scores_treino)
mean(scores_val)
sd(scores_val)
scores_treino
summary(scores_treino)
sd(scores_treino)
scores_val
summary(scores_val)
sd(scores_val)
summary(scores_treino)
sd(scores_treino)
summary(scores_val)
sd(scores_val)
knn = import('sklearn.tree')
model_select = import('sklearn.model_selection')
kfold = model_select$KFold(n_splits=as.integer(10), random_state=as.integer(42), shuffle=FALSE)
split = kfold$split(q7_reg)
scores_treino = 1:10
scores_val = 1:10
for(i in 1:10) {
splits = iter_next(split)
treino = unlist(splits[1])+1
val = unlist(splits[2])+1
clf = knn$DecisionTreeRegressor(criterion = 'mse', random_state = as.integer(42))
clf = clf$fit(q7_X[treino], q7_Y[treino])
tr_pred_Y = clf$predict(q7_X[treino])
scores_treino[i] = skmetrics$mean_absolute_error(q7_Y[treino], tr_pred_Y)
pred_Y = clf$predict(q7_X[val])
scores_val[i] = skmetrics$mean_absolute_error(q7_Y[val], pred_Y)
}
summary(scores_treino)
sd(scores_treino)
summary(scores_val)
sd(scores_val)
x = c(5, 3, 3, 11, 8, 7, 1, 5, 4, 9)
y = c(2, 1, 1, 4, 10, 1, 1, 1, 3, 2)
?ks.test
ks.test(x,y)
ks.test(x,y,alternative='greater')
ks.test(x,y,alternative='two.sided')
ks.test(x,y,alternative='less')
